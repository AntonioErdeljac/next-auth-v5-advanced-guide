// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  properties    Property[]
  reviews       Json[]
  bookings      Booking?   @relation(fields: [bookingId], references: [id])
  payments      Json[]
  bookingId     String?
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Booking {
  id             String   @id @default(cuid()) @map("_id")
  propertyId     String
  propertyTitle  String
  userId         String
  userName       String
  date           String
  price          Int
  payment        Boolean
  paymentGateway String
  bookingTime    DateTime
  paymentTime    DateTime
  User           User[]
}

model Property {
  id             String   @id @default(cuid()) @map("_id")
  hostId         String?
  hostName       String?
  availabilities Json[]
  picture        String[]
  title          String    @unique
  description    String
  reviews        String[]
  User           User?    @relation(fields: [userId], references: [id])
  userId         String?
}
